name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ecr-repository           # set this to your Amazon ECR repository name
  ECS_SERVICE: service1                 # set this to your Amazon ECS service name
  ECS_CLUSTER: ruby-api-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/ruby-api-task.json # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: ruby-app           # set this to the name of the container in the  containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
   deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    
    steps:
     - name: Checkout
       uses: actions/checkout@v3
     
     - name: Set Relase version
       id: vars
       run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
     
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1
    
        
     - name: Build & tag docker image
       id: build-image
       env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}

       run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
     
     - name: Push image to Amazon ECR
       id: push-image
       env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: dev
       run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
     - name: Download task definition
       run: aws ecs describe-task-definition --task-definition ruby-app-task --query taskDefinition > task-definition.json

     - name: Fill in the new image ID in the Amazon ECS task definition
       id: update-task-def
       uses: aws-actions/amazon-ecs-render-task-definition@v1
       with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.push-image.outputs.image }}

     - name: Deploy Amazon ECS task definition
       id: deploy-task-def
       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
       with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: service1
          cluster: ruby-api-cluster 
          
     - name: Check tag version
       run: | 
           echo ${{ env.RELEASE_VERSION }}
